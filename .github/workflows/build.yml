name: Matcher build & Deploy

on:
  workflow_dispatch:


jobs:
  matcherCICD:
    environment:
      name: POC
    runs-on: ubuntu-latest
    steps:
      - name: Checking out Code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ap-northeast-1


      - name: copy .env file
        run: cp dot.env .env

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker image build, tag, push to ECR
        env:
          DOCKER_BUILDKIT: 1
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: matcher
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition matchertask --query taskDefinition > task-definition.json

      - name: Register new task definition
        run: |
          TASK_DEFINITION=$(cat task-definition.json)
          NEW_TASK_DEFINITION=$(echo "$TASK_DEFINITION" | jq --arg IMAGE_TAG latest '.containerDefinitions[0].image = "$ECR_REGISTRY/matcher: \($IMAGE_TAG)" | .')
          REGISTER_OUTPUT=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION")
          echo ::set-output name=task_definition_arn::$(echo "$REGISTER_OUTPUT" | jq -r '.taskDefinition.taskDefinitionArn')
        id: register_task_definition
      - name: Update service
        run: |
          aws ecs update-service --service matcherserv --task-definition ${{ steps.register_task_definition.outputs.task_definition_arn }}
